---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";

export function getStaticPaths() {
  return [
    { params: { name: "basic" } },
    { params: { name: "json5" } },
    { params: { name: "yaml" } },
    { params: { name: "toml" } },
    { params: { name: "dynamic-env" } },
    { params: { name: "docker" } },
    { params: { name: "valibot" } },
  ];
}

interface ExampleOptions {
  name: string;
  title: string;
  note?: string;
  startFile?: string;
}
class Example {
  constructor(private options: ExampleOptions) {}

  get title() {
    return this.options.title;
  }

  get note() {
    return this.options.note;
  }

  get src() {
    const baseURL = new URL(
      `https://stackblitz.com/github/raulfdm/layerfig/tree/main/examples/${this.options.name}`
    );
    baseURL.searchParams.set("embed", "1");
    baseURL.searchParams.set(
      "file",
      this.options.startFile || "src/config/index.ts"
    );

    return baseURL.toString();
  }
}

const examples = new Map<string, Example>([
  [
    "basic",
    new Example({
      name: "basic",
      title: "Basic Example",
    }),
  ],
  [
    "json5",
    new Example({
      name: "json5",
      startFile: "src/config/index.ts",
      title: "JSONC-like example",
    }),
  ],
  [
    "toml",
    new Example({
      name: "toml",
      startFile: "src/config/index.ts",
      title: "Toml example",
    }),
  ],
  [
    "yaml",
    new Example({
      name: "yaml",
      startFile: "src/config/index.ts",
      title: "Yaml example",
    }),
  ],
  [
    "dynamic-env",
    new Example({
      name: "dynamic-env",
      startFile: "src/config/index.ts",
      title: "Dynamic Environment",
    }),
  ],
  [
    "docker",
    new Example({
      name: "docker",
      startFile: "Dockerfile",
      title: "Multi-staged Dockerfile",
    }),
  ],
  [
    "valibot",
    new Example({
      name: "valibot",
      startFile: "src/config/index.ts",
      title: "Valibot example",
    }),
  ],
]);

const { name } = Astro.params;

if (!name) {
  throw new Error("Missing name parameter");
}

const example = examples.get(name);

if (!example) {
  throw new Error(`Example "${name}" not found`);
}
---

<StarlightPage
  frontmatter={{
    title: example.title,
    tableOfContents: false,
  }}
>
  {example.note && <p>{example.note}</p>}
  <iframe src={example.src}></iframe>
</StarlightPage>

<style lang="postcss">
  :root {
    --sl-content-margin-inline: none;
    --sl-content-width: 100% !important;
  }

  :global(.main-frame, .main-frame > div) {
    height: calc(100svh - var(--sl-nav-height)) !important;
  }

  :global(main[data-pagefind-body]) {
    height: 100%;
    display: flex;
    flex-direction: column;

    .content-panel:nth-child(2) {
      flex: 1;

      .sl-container,
      .sl-markdown-content {
        height: 100%;
      }

      footer {
        display: none;
      }
    }
  }

  iframe {
    width: 100%;
    border: none;
    border-radius: 0.8rem;
    min-height: 100%;
  }
</style>

<script>
  changeTheme();

  const themeSelector = document.querySelector("starlight-theme-select select");
  if (themeSelector) {
    themeSelector.addEventListener("change", (e) => {
      changeTheme();
    });
  }

  function changeTheme() {
    const iframe = document.querySelector("iframe")!;
    const { theme } = document.documentElement.dataset;

    const url = new URL(iframe.src);

    if (theme) {
      url.searchParams.set("theme", theme);
      iframe.src = url.toString();
    }
  }
</script>
